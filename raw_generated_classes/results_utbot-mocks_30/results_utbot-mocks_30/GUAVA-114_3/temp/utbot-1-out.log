Started UtBot Contest, classfileDir = /var/benchmarks/projects/guava/guava/target/classes, classpathString=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, outputDir=/home/utbot_mocks/temp/testcases, mocks=Other classes: Mockito
11:32:30.116 | INFO  | Started: warmup: kotlin reflection :: init
11:32:30.185 | INFO  | Finished (in 0.069 sec): warmup: kotlin reflection :: init 
[INIT]
>> [RUN] com.google.common.util.concurrent.AtomicDoubleArray 30
11:32:30.195 | DEBUG | -----------------------------------------------------------------------------
11:32:30.196 | INFO  | Contest.runGeneration: Time budget: 30000 ms, Generation timeout=25500 ms, classpath=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, methodNameFilter=null
11:32:30.197 | INFO  | ClassUnderTest[ FQN: com.google.common.util.concurrent.AtomicDoubleArray
    classfileDir: /var/benchmarks/projects/guava/guava/target/classes
    testClassSimpleName: AtomicDoubleArrayTest
    generatedTestFile: /home/utbot_mocks/temp/testcases/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
    generatedTestsSourcesDir: /home/utbot_mocks/temp/testcases
]
11:32:30.218 | INFO  | Started: class com.google.common.util.concurrent.AtomicDoubleArray
11:32:30.219 | INFO  | Started: preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run
11:32:30.241 | INFO  | Finished (in 0.023 sec): preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run 
11:32:30.242 | INFO  | Started: 2nd optional soot initialization
11:32:30.243 | INFO  | Finished (in 0.001 sec): 2nd optional soot initialization 
11:32:30.251 | DEBUG |  ... 
11:32:30.257 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.toString()
11:32:30.258 | INFO  |  -- Remaining time budget: 25443 ms, #remaining_methods: 14, budget for method: 1817 ms, solver timeout: 908 ms, budget for symbolic execution: 909 ms, budget for concrete execution: 908 ms,  -- 
11:32:30.560 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()1
11:32:30.867 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()2
11:32:31.168 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.toString()
11:32:32.607 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.toString()
11:32:32.643 | INFO  | Finished (in 2.385 sec): method com.google.common.util.concurrent.AtomicDoubleArray.toString() 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
11:32:32.702 | DEBUG |  ... 
11:32:32.703 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.get(int)
11:32:32.703 | INFO  |  -- Remaining time budget: 22993 ms, #remaining_methods: 13, budget for method: 1768 ms, solver timeout: 884 ms, budget for symbolic execution: 884 ms, budget for concrete execution: 884 ms,  -- 
11:32:32.712 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)1
11:32:32.756 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)2
11:32:32.890 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)3
11:32:33.587 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
11:32:34.472 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
11:32:34.510 | INFO  | Finished (in 1.807 sec): method com.google.common.util.concurrent.AtomicDoubleArray.get(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:34.623 | DEBUG |  ... 
11:32:34.624 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.length()
11:32:34.624 | INFO  |  -- Remaining time budget: 21073 ms, #remaining_methods: 12, budget for method: 1756 ms, solver timeout: 878 ms, budget for symbolic execution: 878 ms, budget for concrete execution: 878 ms,  -- 
11:32:34.632 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()1
11:32:34.660 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()2
11:32:34.702 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()3
11:32:34.702 | INFO  | Finished (in 0.078 sec): method com.google.common.util.concurrent.AtomicDoubleArray.length() 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:34.705 | DEBUG |  ... 
11:32:34.706 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
11:32:34.706 | INFO  |  -- Remaining time budget: 20991 ms, #remaining_methods: 11, budget for method: 1908 ms, solver timeout: 954 ms, budget for symbolic execution: 954 ms, budget for concrete execution: 954 ms,  -- 
11:32:34.721 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectInputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
11:32:34.754 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)1
11:32:35.053 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)2
11:32:35.660 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
11:32:36.616 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
11:32:36.642 | INFO  | Finished (in 1.936 sec): method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream) 
<StatsForMethod> :
	#generatedTC=2
	FAILED 1 time(s) with 1 different exception(s)"
11:32:36.696 | DEBUG |  ... 
11:32:36.697 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
11:32:36.697 | INFO  |  -- Remaining time budget: 18999 ms, #remaining_methods: 10, budget for method: 1899 ms, solver timeout: 949 ms, budget for symbolic execution: 950 ms, budget for concrete execution: 949 ms,  -- 
11:32:36.704 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectOutputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
11:32:36.735 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)1
11:32:36.983 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)2
11:32:37.647 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
11:32:38.597 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
11:32:38.641 | INFO  | Finished (in 1.944 sec): method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream) 
<StatsForMethod> :
	#generatedTC=2
	FAILED 1 time(s) with 1 different exception(s)"
11:32:38.702 | DEBUG |  ... 
11:32:38.703 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
11:32:38.703 | INFO  |  -- Remaining time budget: 16993 ms, #remaining_methods: 9, budget for method: 1888 ms, solver timeout: 944 ms, budget for symbolic execution: 944 ms, budget for concrete execution: 944 ms,  -- 
11:32:38.710 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)1
11:32:38.754 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)2
11:32:39.647 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
11:32:40.592 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
11:32:40.631 | INFO  | Finished (in 1.927 sec): method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
11:32:40.757 | DEBUG |  ... 
11:32:40.759 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
11:32:40.760 | INFO  |  -- Remaining time budget: 14937 ms, #remaining_methods: 8, budget for method: 1867 ms, solver timeout: 933 ms, budget for symbolic execution: 934 ms, budget for concrete execution: 933 ms,  -- 
11:32:40.767 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)1
11:32:40.810 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)2
11:32:41.694 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
11:32:42.627 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
11:32:42.666 | INFO  | Finished (in 1.907 sec): method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
11:32:42.802 | DEBUG |  ... 
11:32:42.802 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
11:32:42.802 | INFO  |  -- Remaining time budget: 12894 ms, #remaining_methods: 7, budget for method: 1842 ms, solver timeout: 921 ms, budget for symbolic execution: 921 ms, budget for concrete execution: 921 ms,  -- 
11:32:42.809 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)1
11:32:42.837 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)2
11:32:42.960 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)3
11:32:43.724 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
11:32:44.645 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
11:32:44.666 | INFO  | Finished (in 1.864 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:44.800 | DEBUG |  ... 
11:32:44.801 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
11:32:44.801 | INFO  |  -- Remaining time budget: 10895 ms, #remaining_methods: 6, budget for method: 1815 ms, solver timeout: 907 ms, budget for symbolic execution: 908 ms, budget for concrete execution: 907 ms,  -- 
11:32:44.809 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)1
11:32:44.860 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)2
11:32:45.710 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
11:32:46.617 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
11:32:46.642 | INFO  | Finished (in 1.840 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
11:32:46.775 | DEBUG |  ... 
11:32:46.776 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
11:32:46.776 | INFO  |  -- Remaining time budget: 8920 ms, #remaining_methods: 5, budget for method: 1784 ms, solver timeout: 892 ms, budget for symbolic execution: 892 ms, budget for concrete execution: 892 ms,  -- 
11:32:46.783 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)1
11:32:46.813 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)2
11:32:46.939 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)3
11:32:47.669 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
11:32:48.561 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
11:32:48.592 | INFO  | Finished (in 1.816 sec): method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:48.724 | DEBUG |  ... 
11:32:48.725 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
11:32:48.725 | INFO  |  -- Remaining time budget: 6971 ms, #remaining_methods: 4, budget for method: 1742 ms, solver timeout: 871 ms, budget for symbolic execution: 871 ms, budget for concrete execution: 871 ms,  -- 
11:32:48.731 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)1
11:32:48.761 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)2
11:32:48.933 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)3
11:32:49.597 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
11:32:50.469 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
11:32:50.505 | INFO  | Finished (in 1.780 sec): method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:50.635 | DEBUG |  ... 
11:32:50.636 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
11:32:50.636 | INFO  |  -- Remaining time budget: 5061 ms, #remaining_methods: 3, budget for method: 1687 ms, solver timeout: 843 ms, budget for symbolic execution: 844 ms, budget for concrete execution: 843 ms,  -- 
11:32:50.641 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)1
11:32:50.667 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)2
11:32:50.786 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)3
11:32:51.483 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
11:32:52.327 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
11:32:52.365 | INFO  | Finished (in 1.729 sec): method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:52.497 | DEBUG |  ... 
11:32:52.497 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int)
11:32:52.498 | INFO  |  -- Remaining time budget: 3199 ms, #remaining_methods: 2, budget for method: 1599 ms, solver timeout: 799 ms, budget for symbolic execution: 800 ms, budget for concrete execution: 799 ms,  -- 
11:32:52.503 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)1
11:32:52.572 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)2
11:32:52.592 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)3
11:32:52.593 | INFO  | Finished (in 0.095 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
11:32:52.603 | DEBUG |  ... 
11:32:52.603 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])
11:32:52.603 | INFO  |  -- Remaining time budget: 3093 ms, #remaining_methods: 1, budget for method: 3093 ms, solver timeout: 1000 ms, budget for symbolic execution: 1893 ms, budget for concrete execution: 1200 ms,  -- 
11:32:52.610 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])1
11:32:52.651 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])2
11:32:52.795 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])3
11:32:52.905 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])4
11:32:52.910 | INFO  | Finished (in 0.307 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[]) 
<StatsForMethod> :
	#generatedTC=4
	WITH NO EXCEPTIONS
11:32:52.936 | INFO  | Started: Flushing tests for [AtomicDoubleArray] on disk
11:32:53.152 | INFO  | File size for AtomicDoubleArrayTest: 24 KB
11:32:53.153 | INFO  | Finished (in 0.217 sec): Flushing tests for [AtomicDoubleArray] on disk 
11:32:53.154 | INFO  | Finished (in 22.936 sec): class com.google.common.util.concurrent.AtomicDoubleArray 
<StatsForClass> :
	canceled by timeout = false
	#methods = 14, 
	#methods started symbolic exploration = 14
	#methods with at least one TC = 14
	#methods with exceptions = 2
	#generated TC = 37
	#coverage = null
[READY]
