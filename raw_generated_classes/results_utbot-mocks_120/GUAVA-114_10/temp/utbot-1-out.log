Started UtBot Contest, classfileDir = /var/benchmarks/projects/guava/guava/target/classes, classpathString=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, outputDir=/home/utbot_mocks/temp/testcases, mocks=Other classes: Mockito
01:57:22.618 | INFO  | Started: warmup: kotlin reflection :: init
01:57:22.697 | INFO  | Finished (in 0.078 sec): warmup: kotlin reflection :: init 
[INIT]
>> [RUN] com.google.common.util.concurrent.AtomicDoubleArray 120
01:57:22.705 | DEBUG | -----------------------------------------------------------------------------
01:57:22.706 | INFO  | Contest.runGeneration: Time budget: 120000 ms, Generation timeout=102000 ms, classpath=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, methodNameFilter=null
01:57:22.707 | INFO  | ClassUnderTest[ FQN: com.google.common.util.concurrent.AtomicDoubleArray
    classfileDir: /var/benchmarks/projects/guava/guava/target/classes
    testClassSimpleName: AtomicDoubleArrayTest
    generatedTestFile: /home/utbot_mocks/temp/testcases/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
    generatedTestsSourcesDir: /home/utbot_mocks/temp/testcases
]
01:57:22.729 | INFO  | Started: class com.google.common.util.concurrent.AtomicDoubleArray
01:57:22.730 | INFO  | Started: preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run
01:57:22.752 | INFO  | Finished (in 0.022 sec): preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run 
01:57:22.753 | INFO  | Started: 2nd optional soot initialization
01:57:22.754 | INFO  | Finished (in 0.001 sec): 2nd optional soot initialization 
01:57:22.762 | DEBUG |  ... 
01:57:22.772 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.toString()
01:57:22.778 | INFO  |  -- Remaining time budget: 101942 ms, #remaining_methods: 14, budget for method: 7281 ms, solver timeout: 1000 ms, budget for symbolic execution: 6081 ms, budget for concrete execution: 1200 ms,  -- 
01:57:23.080 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()1
01:57:23.381 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()2
01:57:28.852 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.toString()
01:57:30.054 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.toString()
01:57:30.118 | INFO  | Finished (in 7.341 sec): method com.google.common.util.concurrent.AtomicDoubleArray.toString() 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
01:57:30.425 | DEBUG |  ... 
01:57:30.426 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.get(int)
01:57:30.426 | INFO  |  -- Remaining time budget: 94281 ms, #remaining_methods: 13, budget for method: 7252 ms, solver timeout: 1000 ms, budget for symbolic execution: 6052 ms, budget for concrete execution: 1200 ms,  -- 
01:57:30.432 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)1
01:57:30.476 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)2
01:57:30.601 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)3
01:57:36.478 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
01:57:37.679 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
01:57:37.769 | INFO  | Finished (in 7.343 sec): method com.google.common.util.concurrent.AtomicDoubleArray.get(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:57:38.262 | DEBUG |  ... 
01:57:38.263 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.length()
01:57:38.263 | INFO  |  -- Remaining time budget: 86443 ms, #remaining_methods: 12, budget for method: 7203 ms, solver timeout: 1000 ms, budget for symbolic execution: 6003 ms, budget for concrete execution: 1200 ms,  -- 
01:57:38.271 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()1
01:57:38.302 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()2
01:57:38.348 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()3
01:57:38.349 | INFO  | Finished (in 0.086 sec): method com.google.common.util.concurrent.AtomicDoubleArray.length() 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:57:38.352 | DEBUG |  ... 
01:57:38.353 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
01:57:38.353 | INFO  |  -- Remaining time budget: 86353 ms, #remaining_methods: 11, budget for method: 7850 ms, solver timeout: 1000 ms, budget for symbolic execution: 6650 ms, budget for concrete execution: 1200 ms,  -- 
01:57:38.370 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectInputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
01:57:38.405 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)1
01:57:38.702 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)2
01:57:40.824 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)3
01:57:41.663 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)4
01:57:41.783 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)5
01:57:45.004 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
01:57:46.204 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
01:57:46.417 | INFO  | Finished (in 8.064 sec): method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream) 
<StatsForMethod> :
	#generatedTC=5
	FAILED 1 time(s) with 1 different exception(s)"
01:57:46.469 | DEBUG |  ... 
01:57:46.469 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
01:57:46.469 | INFO  |  -- Remaining time budget: 78237 ms, #remaining_methods: 10, budget for method: 7823 ms, solver timeout: 1000 ms, budget for symbolic execution: 6623 ms, budget for concrete execution: 1200 ms,  -- 
01:57:46.476 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectOutputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
01:57:46.503 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)1
01:57:46.725 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)2
01:57:50.040 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)3
01:57:50.793 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)4
01:57:51.552 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)5
01:57:52.435 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)6
01:57:53.093 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
01:57:54.011 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)7
01:57:54.293 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
01:57:54.398 | INFO  | Finished (in 7.928 sec): method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream) 
<StatsForMethod> :
	#generatedTC=7
	FAILED 1 time(s) with 1 different exception(s)"
01:57:54.631 | DEBUG |  ... 
01:57:54.632 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
01:57:54.632 | INFO  |  -- Remaining time budget: 70074 ms, #remaining_methods: 9, budget for method: 7786 ms, solver timeout: 1000 ms, budget for symbolic execution: 6586 ms, budget for concrete execution: 1200 ms,  -- 
01:57:54.639 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)1
01:57:54.686 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)2
01:58:01.219 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
01:58:02.419 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
01:58:02.489 | INFO  | Finished (in 7.856 sec): method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
01:58:03.052 | DEBUG |  ... 
01:58:03.053 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
01:58:03.053 | INFO  |  -- Remaining time budget: 61654 ms, #remaining_methods: 8, budget for method: 7706 ms, solver timeout: 1000 ms, budget for symbolic execution: 6506 ms, budget for concrete execution: 1200 ms,  -- 
01:58:03.060 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)1
01:58:03.104 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)2
01:58:09.559 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
01:58:10.760 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
01:58:10.843 | INFO  | Finished (in 7.791 sec): method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
01:58:11.130 | DEBUG |  ... 
01:58:11.131 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
01:58:11.131 | INFO  |  -- Remaining time budget: 53576 ms, #remaining_methods: 7, budget for method: 7653 ms, solver timeout: 1000 ms, budget for symbolic execution: 6453 ms, budget for concrete execution: 1200 ms,  -- 
01:58:11.137 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)1
01:58:11.164 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)2
01:58:11.286 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)3
01:58:17.584 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
01:58:18.785 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
01:58:18.858 | INFO  | Finished (in 7.726 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:58:19.454 | DEBUG |  ... 
01:58:19.454 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
01:58:19.455 | INFO  |  -- Remaining time budget: 45252 ms, #remaining_methods: 6, budget for method: 7542 ms, solver timeout: 1000 ms, budget for symbolic execution: 6342 ms, budget for concrete execution: 1200 ms,  -- 
01:58:19.462 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)1
01:58:19.505 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)2
01:58:25.797 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
01:58:26.998 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
01:58:27.096 | INFO  | Finished (in 7.641 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
01:58:27.329 | DEBUG |  ... 
01:58:27.330 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
01:58:27.330 | INFO  |  -- Remaining time budget: 37376 ms, #remaining_methods: 5, budget for method: 7475 ms, solver timeout: 1000 ms, budget for symbolic execution: 6275 ms, budget for concrete execution: 1200 ms,  -- 
01:58:27.336 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)1
01:58:27.363 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)2
01:58:27.486 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)3
01:58:33.605 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
01:58:34.806 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
01:58:34.881 | INFO  | Finished (in 7.550 sec): method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:58:35.437 | DEBUG |  ... 
01:58:35.438 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
01:58:35.438 | INFO  |  -- Remaining time budget: 29268 ms, #remaining_methods: 4, budget for method: 7317 ms, solver timeout: 1000 ms, budget for symbolic execution: 6117 ms, budget for concrete execution: 1200 ms,  -- 
01:58:35.446 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)1
01:58:35.473 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)2
01:58:35.642 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)3
01:58:41.555 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
01:58:42.756 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
01:58:42.851 | INFO  | Finished (in 7.413 sec): method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:58:42.962 | DEBUG |  ... 
01:58:42.963 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
01:58:42.963 | INFO  |  -- Remaining time budget: 21744 ms, #remaining_methods: 3, budget for method: 7248 ms, solver timeout: 1000 ms, budget for symbolic execution: 6048 ms, budget for concrete execution: 1200 ms,  -- 
01:58:42.969 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)1
01:58:42.995 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)2
01:58:43.111 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)3
01:58:49.011 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
01:58:50.212 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
01:58:50.289 | INFO  | Finished (in 7.326 sec): method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:58:50.834 | DEBUG |  ... 
01:58:50.835 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int)
01:58:50.835 | INFO  |  -- Remaining time budget: 13871 ms, #remaining_methods: 2, budget for method: 6935 ms, solver timeout: 1000 ms, budget for symbolic execution: 5735 ms, budget for concrete execution: 1200 ms,  -- 
01:58:50.841 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)1
01:58:50.919 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)2
01:58:50.939 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)3
01:58:50.939 | INFO  | Finished (in 0.104 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
01:58:50.950 | DEBUG |  ... 
01:58:50.951 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])
01:58:50.951 | INFO  |  -- Remaining time budget: 13755 ms, #remaining_methods: 1, budget for method: 13755 ms, solver timeout: 1000 ms, budget for symbolic execution: 12555 ms, budget for concrete execution: 1200 ms,  -- 
01:58:50.959 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])1
01:58:50.985 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])2
01:58:51.124 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])3
01:58:51.230 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])4
01:58:51.235 | INFO  | Finished (in 0.284 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[]) 
<StatsForMethod> :
	#generatedTC=4
	WITH NO EXCEPTIONS
01:58:51.262 | INFO  | Started: Flushing tests for [AtomicDoubleArray] on disk
01:58:51.526 | INFO  | File size for AtomicDoubleArrayTest: 45 KB
01:58:51.528 | INFO  | Finished (in 0.265 sec): Flushing tests for [AtomicDoubleArray] on disk 
01:58:51.528 | INFO  | Finished (in 88.799 sec): class com.google.common.util.concurrent.AtomicDoubleArray 
<StatsForClass> :
	canceled by timeout = false
	#methods = 14, 
	#methods started symbolic exploration = 14
	#methods with at least one TC = 14
	#methods with exceptions = 2
	#generated TC = 45
	#coverage = null
[READY]
