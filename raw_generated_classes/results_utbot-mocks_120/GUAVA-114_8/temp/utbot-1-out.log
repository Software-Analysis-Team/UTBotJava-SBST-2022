Started UtBot Contest, classfileDir = /var/benchmarks/projects/guava/guava/target/classes, classpathString=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, outputDir=/home/utbot_mocks/temp/testcases, mocks=Other classes: Mockito
23:50:45.904 | INFO  | Started: warmup: kotlin reflection :: init
23:50:45.973 | INFO  | Finished (in 0.069 sec): warmup: kotlin reflection :: init 
[INIT]
>> [RUN] com.google.common.util.concurrent.AtomicDoubleArray 120
23:50:45.983 | DEBUG | -----------------------------------------------------------------------------
23:50:45.984 | INFO  | Contest.runGeneration: Time budget: 120000 ms, Generation timeout=102000 ms, classpath=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, methodNameFilter=null
23:50:45.985 | INFO  | ClassUnderTest[ FQN: com.google.common.util.concurrent.AtomicDoubleArray
    classfileDir: /var/benchmarks/projects/guava/guava/target/classes
    testClassSimpleName: AtomicDoubleArrayTest
    generatedTestFile: /home/utbot_mocks/temp/testcases/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
    generatedTestsSourcesDir: /home/utbot_mocks/temp/testcases
]
23:50:46.006 | INFO  | Started: class com.google.common.util.concurrent.AtomicDoubleArray
23:50:46.007 | INFO  | Started: preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run
23:50:46.029 | INFO  | Finished (in 0.022 sec): preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run 
23:50:46.030 | INFO  | Started: 2nd optional soot initialization
23:50:46.031 | INFO  | Finished (in 0.001 sec): 2nd optional soot initialization 
23:50:46.039 | DEBUG |  ... 
23:50:46.053 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.toString()
23:50:46.054 | INFO  |  -- Remaining time budget: 101943 ms, #remaining_methods: 14, budget for method: 7281 ms, solver timeout: 1000 ms, budget for symbolic execution: 6081 ms, budget for concrete execution: 1200 ms,  -- 
23:50:46.362 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()1
23:50:46.664 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()2
23:50:52.133 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.toString()
23:50:53.335 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.toString()
23:50:53.409 | INFO  | Finished (in 7.355 sec): method com.google.common.util.concurrent.AtomicDoubleArray.toString() 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
23:50:53.713 | DEBUG |  ... 
23:50:53.714 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.get(int)
23:50:53.714 | INFO  |  -- Remaining time budget: 94271 ms, #remaining_methods: 13, budget for method: 7251 ms, solver timeout: 1000 ms, budget for symbolic execution: 6051 ms, budget for concrete execution: 1200 ms,  -- 
23:50:53.720 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)1
23:50:53.772 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)2
23:50:53.912 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)3
23:50:59.765 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
23:51:00.966 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
23:51:01.055 | INFO  | Finished (in 7.340 sec): method com.google.common.util.concurrent.AtomicDoubleArray.get(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:51:01.536 | DEBUG |  ... 
23:51:01.537 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.length()
23:51:01.537 | INFO  |  -- Remaining time budget: 86448 ms, #remaining_methods: 12, budget for method: 7204 ms, solver timeout: 1000 ms, budget for symbolic execution: 6004 ms, budget for concrete execution: 1200 ms,  -- 
23:51:01.543 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()1
23:51:01.570 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()2
23:51:01.610 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()3
23:51:01.610 | INFO  | Finished (in 0.073 sec): method com.google.common.util.concurrent.AtomicDoubleArray.length() 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:51:01.614 | DEBUG |  ... 
23:51:01.614 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
23:51:01.614 | INFO  |  -- Remaining time budget: 86370 ms, #remaining_methods: 11, budget for method: 7851 ms, solver timeout: 1000 ms, budget for symbolic execution: 6651 ms, budget for concrete execution: 1200 ms,  -- 
23:51:01.631 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectInputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
23:51:01.666 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)1
23:51:01.932 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)2
23:51:03.985 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)3
23:51:04.832 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)4
23:51:04.960 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)5
23:51:08.266 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
23:51:09.467 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
23:51:09.707 | INFO  | Finished (in 8.093 sec): method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream) 
<StatsForMethod> :
	#generatedTC=5
	FAILED 1 time(s) with 1 different exception(s)"
23:51:09.760 | DEBUG |  ... 
23:51:09.760 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
23:51:09.760 | INFO  |  -- Remaining time budget: 78224 ms, #remaining_methods: 10, budget for method: 7822 ms, solver timeout: 1000 ms, budget for symbolic execution: 6622 ms, budget for concrete execution: 1200 ms,  -- 
23:51:09.768 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectOutputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
23:51:09.798 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)1
23:51:10.025 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)2
23:51:13.307 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)3
23:51:14.058 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)4
23:51:14.802 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)5
23:51:15.679 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)6
23:51:16.382 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
23:51:17.245 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)7
23:51:17.583 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
23:51:17.660 | INFO  | Finished (in 7.900 sec): method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream) 
<StatsForMethod> :
	#generatedTC=7
	FAILED 1 time(s) with 1 different exception(s)"
23:51:17.894 | DEBUG |  ... 
23:51:17.894 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
23:51:17.895 | INFO  |  -- Remaining time budget: 70090 ms, #remaining_methods: 9, budget for method: 7787 ms, solver timeout: 1000 ms, budget for symbolic execution: 6587 ms, budget for concrete execution: 1200 ms,  -- 
23:51:17.901 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)1
23:51:17.947 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)2
23:51:24.482 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
23:51:25.683 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
23:51:25.747 | INFO  | Finished (in 7.852 sec): method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
23:51:26.294 | DEBUG |  ... 
23:51:26.295 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
23:51:26.295 | INFO  |  -- Remaining time budget: 61689 ms, #remaining_methods: 8, budget for method: 7711 ms, solver timeout: 1000 ms, budget for symbolic execution: 6511 ms, budget for concrete execution: 1200 ms,  -- 
23:51:26.302 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)1
23:51:26.344 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)2
23:51:32.807 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
23:51:34.007 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
23:51:34.090 | INFO  | Finished (in 7.795 sec): method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
23:51:34.377 | DEBUG |  ... 
23:51:34.378 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
23:51:34.378 | INFO  |  -- Remaining time budget: 53607 ms, #remaining_methods: 7, budget for method: 7658 ms, solver timeout: 1000 ms, budget for symbolic execution: 6458 ms, budget for concrete execution: 1200 ms,  -- 
23:51:34.385 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)1
23:51:34.411 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)2
23:51:34.529 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)3
23:51:40.836 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
23:51:42.037 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
23:51:42.141 | INFO  | Finished (in 7.763 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:51:42.725 | DEBUG |  ... 
23:51:42.726 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
23:51:42.726 | INFO  |  -- Remaining time budget: 45258 ms, #remaining_methods: 6, budget for method: 7543 ms, solver timeout: 1000 ms, budget for symbolic execution: 6343 ms, budget for concrete execution: 1200 ms,  -- 
23:51:42.734 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)1
23:51:42.775 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)2
23:51:49.070 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
23:51:50.271 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
23:51:50.356 | INFO  | Finished (in 7.630 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
23:51:50.578 | DEBUG |  ... 
23:51:50.578 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
23:51:50.579 | INFO  |  -- Remaining time budget: 37406 ms, #remaining_methods: 5, budget for method: 7481 ms, solver timeout: 1000 ms, budget for symbolic execution: 6281 ms, budget for concrete execution: 1200 ms,  -- 
23:51:50.584 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)1
23:51:50.612 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)2
23:51:50.731 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)3
23:51:56.860 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
23:51:58.061 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
23:51:58.134 | INFO  | Finished (in 7.556 sec): method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:51:58.701 | DEBUG |  ... 
23:51:58.702 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
23:51:58.702 | INFO  |  -- Remaining time budget: 29283 ms, #remaining_methods: 4, budget for method: 7320 ms, solver timeout: 1000 ms, budget for symbolic execution: 6120 ms, budget for concrete execution: 1200 ms,  -- 
23:51:58.710 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)1
23:51:58.739 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)2
23:51:58.906 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)3
23:52:04.823 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
23:52:06.024 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
23:52:06.126 | INFO  | Finished (in 7.424 sec): method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:52:06.205 | DEBUG |  ... 
23:52:06.206 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
23:52:06.206 | INFO  |  -- Remaining time budget: 21778 ms, #remaining_methods: 3, budget for method: 7259 ms, solver timeout: 1000 ms, budget for symbolic execution: 6059 ms, budget for concrete execution: 1200 ms,  -- 
23:52:06.214 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)1
23:52:06.241 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)2
23:52:06.362 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)3
23:52:12.265 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
23:52:13.466 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
23:52:13.541 | INFO  | Finished (in 7.335 sec): method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:52:14.100 | DEBUG |  ... 
23:52:14.101 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int)
23:52:14.101 | INFO  |  -- Remaining time budget: 13884 ms, #remaining_methods: 2, budget for method: 6942 ms, solver timeout: 1000 ms, budget for symbolic execution: 5742 ms, budget for concrete execution: 1200 ms,  -- 
23:52:14.106 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)1
23:52:14.177 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)2
23:52:14.197 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)3
23:52:14.197 | INFO  | Finished (in 0.096 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
23:52:14.207 | DEBUG |  ... 
23:52:14.208 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])
23:52:14.208 | INFO  |  -- Remaining time budget: 13776 ms, #remaining_methods: 1, budget for method: 13776 ms, solver timeout: 1000 ms, budget for symbolic execution: 12576 ms, budget for concrete execution: 1200 ms,  -- 
23:52:14.218 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])1
23:52:14.250 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])2
23:52:14.387 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])3
23:52:14.491 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])4
23:52:14.496 | INFO  | Finished (in 0.287 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[]) 
<StatsForMethod> :
	#generatedTC=4
	WITH NO EXCEPTIONS
23:52:14.523 | INFO  | Started: Flushing tests for [AtomicDoubleArray] on disk
23:52:14.808 | INFO  | File size for AtomicDoubleArrayTest: 45 KB
23:52:14.810 | INFO  | Finished (in 0.287 sec): Flushing tests for [AtomicDoubleArray] on disk 
23:52:14.810 | INFO  | Finished (in 88.804 sec): class com.google.common.util.concurrent.AtomicDoubleArray 
<StatsForClass> :
	canceled by timeout = false
	#methods = 14, 
	#methods started symbolic exploration = 14
	#methods with at least one TC = 14
	#methods with exceptions = 2
	#generated TC = 45
	#coverage = null
[READY]
