Started UtBot Contest, classfileDir = /var/benchmarks/projects/guava/guava/target/classes, classpathString=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, outputDir=/home/utbot_mocks/temp/testcases, mocks=Other classes: Mockito
18:37:05.533 | INFO  | Started: warmup: kotlin reflection :: init
18:37:05.611 | INFO  | Finished (in 0.077 sec): warmup: kotlin reflection :: init 
[INIT]
>> [RUN] com.google.common.util.concurrent.AtomicDoubleArray 120
18:37:05.626 | DEBUG | -----------------------------------------------------------------------------
18:37:05.626 | INFO  | Contest.runGeneration: Time budget: 120000 ms, Generation timeout=102000 ms, classpath=/var/benchmarks/projects/guava/guava/target/classes:/var/benchmarks/projects/guava/guava/target/guava-26.0-jre.jar:/var/benchmarks/projects/./guava/guava/target/dependency/checker-qual-2.5.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/error_prone_annotations-2.1.3.jar:/var/benchmarks/projects/guava/guava/target/dependency/j2objc-annotations-1.1.jar:/var/benchmarks/projects/guava/guava/target/dependency/jsr305-3.0.2.jar:/var/benchmarks/projects/guava/guava/target/dependency/animal-sniffer-annotations-1.14.jar, methodNameFilter=null
18:37:05.627 | INFO  | ClassUnderTest[ FQN: com.google.common.util.concurrent.AtomicDoubleArray
    classfileDir: /var/benchmarks/projects/guava/guava/target/classes
    testClassSimpleName: AtomicDoubleArrayTest
    generatedTestFile: /home/utbot_mocks/temp/testcases/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
    generatedTestsSourcesDir: /home/utbot_mocks/temp/testcases
]
18:37:05.662 | INFO  | Started: class com.google.common.util.concurrent.AtomicDoubleArray
18:37:05.663 | INFO  | Started: preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run
18:37:05.691 | INFO  | Finished (in 0.028 sec): preparation class class com.google.common.util.concurrent.AtomicDoubleArray: kotlin reflection :: run 
18:37:05.692 | INFO  | Started: 2nd optional soot initialization
18:37:05.693 | INFO  | Finished (in 0.001 sec): 2nd optional soot initialization 
18:37:05.701 | DEBUG |  ... 
18:37:05.710 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.toString()
18:37:05.711 | INFO  |  -- Remaining time budget: 101923 ms, #remaining_methods: 14, budget for method: 7280 ms, solver timeout: 1000 ms, budget for symbolic execution: 6080 ms, budget for concrete execution: 1200 ms,  -- 
18:37:06.017 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()1
18:37:06.336 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.toString()2
18:37:11.790 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.toString()
18:37:12.992 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.toString()
18:37:13.044 | INFO  | Finished (in 7.334 sec): method com.google.common.util.concurrent.AtomicDoubleArray.toString() 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
18:37:13.326 | DEBUG |  ... 
18:37:13.327 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.get(int)
18:37:13.327 | INFO  |  -- Remaining time budget: 94299 ms, #remaining_methods: 13, budget for method: 7253 ms, solver timeout: 1000 ms, budget for symbolic execution: 6053 ms, budget for concrete execution: 1200 ms,  -- 
18:37:13.335 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)1
18:37:13.381 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)2
18:37:13.509 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.get(int)3
18:37:19.380 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
18:37:20.581 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.get(int)
18:37:20.642 | INFO  | Finished (in 7.315 sec): method com.google.common.util.concurrent.AtomicDoubleArray.get(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:37:21.118 | DEBUG |  ... 
18:37:21.119 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.length()
18:37:21.119 | INFO  |  -- Remaining time budget: 86507 ms, #remaining_methods: 12, budget for method: 7208 ms, solver timeout: 1000 ms, budget for symbolic execution: 6008 ms, budget for concrete execution: 1200 ms,  -- 
18:37:21.126 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()1
18:37:21.153 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()2
18:37:21.192 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.length()3
18:37:21.192 | INFO  | Finished (in 0.073 sec): method com.google.common.util.concurrent.AtomicDoubleArray.length() 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:37:21.196 | DEBUG |  ... 
18:37:21.197 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
18:37:21.197 | INFO  |  -- Remaining time budget: 86429 ms, #remaining_methods: 11, budget for method: 7857 ms, solver timeout: 1000 ms, budget for symbolic execution: 6657 ms, budget for concrete execution: 1200 ms,  -- 
18:37:21.213 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectInputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
18:37:21.248 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)1
18:37:21.509 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)2
18:37:23.568 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)3
18:37:24.414 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)4
18:37:24.534 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)5
18:37:27.854 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
18:37:29.055 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream)
18:37:29.255 | INFO  | Finished (in 8.058 sec): method com.google.common.util.concurrent.AtomicDoubleArray.readObject(ObjectInputStream) 
<StatsForMethod> :
	#generatedTC=5
	FAILED 1 time(s) with 1 different exception(s)"
18:37:29.293 | DEBUG |  ... 
18:37:29.294 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
18:37:29.294 | INFO  |  -- Remaining time budget: 78333 ms, #remaining_methods: 10, budget for method: 7833 ms, solver timeout: 1000 ms, budget for symbolic execution: 6633 ms, budget for concrete execution: 1200 ms,  -- 
18:37:29.301 | ERROR | Symbolic execution FAILED
com.huawei.utbot.instrumentation.util.ChildProcessError: Error in the child process |> java.lang.IllegalAccessException: Class com.huawei.utbot.framework.concrete.MockValueConstructor can not access a member of class java.io.ObjectOutputStream with modifiers "protected"
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:413)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.call(MockValueConstructor.kt:414)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.updateWithExecutableCallModel(MockValueConstructor.kt:353)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructFromAssembleModel(MockValueConstructor.kt:332)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.construct(MockValueConstructor.kt:126)
	at com.huawei.utbot.framework.concrete.MockValueConstructor.constructMethodParameters(MockValueConstructor.kt:101)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:126)
	at com.huawei.utbot.framework.concrete.UtExecutionInstrumentation.invoke(UtExecutionInstrumentation.kt:96)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.loop(ChildProcess.kt:114)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt:76)
	at com.huawei.utbot.instrumentation.process.ChildProcessKt.main(ChildProcess.kt)

	at com.huawei.utbot.instrumentation.ConcreteExecutor.executeAsync(ConcreteExecutor.kt:391) ~[utbot-junit-contest-1.0.jar:?]
	at com.huawei.utbot.instrumentation.ConcreteExecutor$executeAsync$1.invokeSuspend(ConcreteExecutor.kt) ~[utbot-junit-contest-1.0.jar:?]
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) [utbot-junit-contest-1.0.jar:?]
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) [utbot-junit-contest-1.0.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_312]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_312]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_312]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_312]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_312]
18:37:29.330 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)1
18:37:29.552 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)2
18:37:32.849 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)3
18:37:33.596 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)4
18:37:34.350 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)5
18:37:35.214 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)6
18:37:35.927 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
18:37:36.788 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)7
18:37:37.128 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream)
18:37:37.206 | INFO  | Finished (in 7.912 sec): method com.google.common.util.concurrent.AtomicDoubleArray.writeObject(ObjectOutputStream) 
<StatsForMethod> :
	#generatedTC=7
	FAILED 1 time(s) with 1 different exception(s)"
18:37:37.423 | DEBUG |  ... 
18:37:37.423 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
18:37:37.424 | INFO  |  -- Remaining time budget: 70203 ms, #remaining_methods: 9, budget for method: 7800 ms, solver timeout: 1000 ms, budget for symbolic execution: 6600 ms, budget for concrete execution: 1200 ms,  -- 
18:37:37.438 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)1
18:37:37.481 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.set(int, double)2
18:37:44.024 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
18:37:45.225 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)
18:37:45.340 | INFO  | Finished (in 7.917 sec): method com.google.common.util.concurrent.AtomicDoubleArray.set(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
18:37:45.888 | DEBUG |  ... 
18:37:45.889 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
18:37:45.889 | INFO  |  -- Remaining time budget: 61738 ms, #remaining_methods: 8, budget for method: 7717 ms, solver timeout: 1000 ms, budget for symbolic execution: 6517 ms, budget for concrete execution: 1200 ms,  -- 
18:37:45.895 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)1
18:37:45.936 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)2
18:37:52.406 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
18:37:53.606 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)
18:37:53.676 | INFO  | Finished (in 7.787 sec): method com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
18:37:53.943 | DEBUG |  ... 
18:37:53.944 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
18:37:53.944 | INFO  |  -- Remaining time budget: 53683 ms, #remaining_methods: 7, budget for method: 7669 ms, solver timeout: 1000 ms, budget for symbolic execution: 6469 ms, budget for concrete execution: 1200 ms,  -- 
18:37:53.957 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)1
18:37:53.983 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)2
18:37:54.104 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)3
18:38:00.413 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
18:38:01.614 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)
18:38:01.689 | INFO  | Finished (in 7.745 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:38:02.239 | DEBUG |  ... 
18:38:02.240 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
18:38:02.240 | INFO  |  -- Remaining time budget: 45386 ms, #remaining_methods: 6, budget for method: 7564 ms, solver timeout: 1000 ms, budget for symbolic execution: 6364 ms, budget for concrete execution: 1200 ms,  -- 
18:38:02.248 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)1
18:38:02.289 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)2
18:38:08.605 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
18:38:09.806 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)
18:38:09.896 | INFO  | Finished (in 7.655 sec): method com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double) 
<StatsForMethod> :
	#generatedTC=2
	WITH NO EXCEPTIONS
18:38:10.139 | DEBUG |  ... 
18:38:10.140 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
18:38:10.140 | INFO  |  -- Remaining time budget: 37487 ms, #remaining_methods: 5, budget for method: 7497 ms, solver timeout: 1000 ms, budget for symbolic execution: 6297 ms, budget for concrete execution: 1200 ms,  -- 
18:38:10.149 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)1
18:38:10.179 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)2
18:38:10.309 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)3
18:38:16.437 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
18:38:17.638 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)
18:38:17.709 | INFO  | Finished (in 7.569 sec): method com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:38:18.268 | DEBUG |  ... 
18:38:18.269 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
18:38:18.269 | INFO  |  -- Remaining time budget: 29358 ms, #remaining_methods: 4, budget for method: 7339 ms, solver timeout: 1000 ms, budget for symbolic execution: 6139 ms, budget for concrete execution: 1200 ms,  -- 
18:38:18.276 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)1
18:38:18.305 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)2
18:38:18.474 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)3
18:38:24.408 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
18:38:25.609 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)
18:38:25.690 | INFO  | Finished (in 7.421 sec): method com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:38:25.788 | DEBUG |  ... 
18:38:25.789 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
18:38:25.789 | INFO  |  -- Remaining time budget: 21837 ms, #remaining_methods: 3, budget for method: 7279 ms, solver timeout: 1000 ms, budget for symbolic execution: 6079 ms, budget for concrete execution: 1200 ms,  -- 
18:38:25.794 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)1
18:38:25.818 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)2
18:38:25.933 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)3
18:38:31.868 | INFO  | |> Starting concrete execution for remaining state: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
18:38:33.069 | INFO  | (X) Cancelling concrete execution: com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)
18:38:33.152 | INFO  | Finished (in 7.363 sec): method com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:38:33.706 | DEBUG |  ... 
18:38:33.707 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int)
18:38:33.708 | INFO  |  -- Remaining time budget: 13919 ms, #remaining_methods: 2, budget for method: 6959 ms, solver timeout: 1000 ms, budget for symbolic execution: 5759 ms, budget for concrete execution: 1200 ms,  -- 
18:38:33.713 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)1
18:38:33.781 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)2
18:38:33.801 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(int)3
18:38:33.801 | INFO  | Finished (in 0.094 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(int) 
<StatsForMethod> :
	#generatedTC=3
	WITH NO EXCEPTIONS
18:38:33.811 | DEBUG |  ... 
18:38:33.812 | INFO  | Started: method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])
18:38:33.812 | INFO  |  -- Remaining time budget: 13814 ms, #remaining_methods: 1, budget for method: 13814 ms, solver timeout: 1000 ms, budget for symbolic execution: 12614 ms, budget for concrete execution: 1200 ms,  -- 
18:38:33.817 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])1
18:38:33.858 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])2
18:38:33.996 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])3
18:38:34.100 | DEBUG | --new testCase collected, to generate: testCom.google.common.util.concurrent.AtomicDoubleArray.<init>(double[])4
18:38:34.105 | INFO  | Finished (in 0.292 sec): method com.google.common.util.concurrent.AtomicDoubleArray.<init>(double[]) 
<StatsForMethod> :
	#generatedTC=4
	WITH NO EXCEPTIONS
18:38:34.131 | INFO  | Started: Flushing tests for [AtomicDoubleArray] on disk
18:38:34.396 | INFO  | File size for AtomicDoubleArrayTest: 45 KB
18:38:34.397 | INFO  | Finished (in 0.266 sec): Flushing tests for [AtomicDoubleArray] on disk 
18:38:34.398 | INFO  | Finished (in 88.736 sec): class com.google.common.util.concurrent.AtomicDoubleArray 
<StatsForClass> :
	canceled by timeout = false
	#methods = 14, 
	#methods started symbolic exploration = 14
	#methods with at least one TC = 14
	#methods with exceptions = 2
	#generated TC = 45
	#coverage = null
[READY]
